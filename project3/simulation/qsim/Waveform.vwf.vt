// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/05/2022 22:57:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decoder_5_32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoder_5_32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] d;
// wires                                               
wire [31:0] out;

// assign statements (if any)                          
decoder_5_32 i1 (
// port map - connection between master ports and signals/registers   
	.d(d),
	.out(out)
);
initial 
begin 
#1000000 $finish;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b0;
	d[4] = #90000 1'b1;
	d[4] = #60000 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b0;
	d[3] = #120000 1'b1;
	d[3] = #30000 1'b0;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
	d[2] = #120000 1'b1;
	d[2] = #30000 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b0;
	d[1] = #60000 1'b1;
	d[1] = #30000 1'b0;
	d[1] = #30000 1'b1;
	d[1] = #30000 1'b0;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b0;
	d[0] = #30000 1'b1;
	d[0] = #60000 1'b0;
	d[0] = #30000 1'b1;
	d[0] = #30000 1'b0;
end 
endmodule

